// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles for authentication
enum UserRole {
  OWNER     // Pemilik warteg
  EMPLOYEE  // Karyawan (tukang cuci piring, dll)
  CUSTOMER  // Pelanggan
}

// Transaction status
enum TransactionStatus {
  PENDING    // Belum bayar
  PARTIAL    // Bayar sebagian (cicilan)
  COMPLETED  // Lunas
  CANCELLED  // Dibatalkan
}

// Menu categories
enum MenuCategory {
  NASI      // Nasi putih, nasi uduk, dll
  LAUK      // Ayam, tempe, tahu, dll
  SAMBAL    // Sambal ijo, sambal merah, dll
  SAYUR     // Sayur asem, kangkung, dll
  MINUMAN   // Es teh, kopi, dll
}

// Payment methods
enum PaymentMethod {
  CASH      // Tunai
  TRANSFER  // Transfer bank
  DEBT      // Utang/bayar nanti
}

// Users table (Employee, Customer, Owner)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  address   String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions    Transaction[]
  customerDebts   CustomerDebt[]
  paymentRecords  PaymentRecord[]

  @@map("users")
}

// Menu items
model Menu {
  id          String       @id @default(cuid())
  name        String
  category    MenuCategory
  price       Decimal      @db.Decimal(10, 2)
  description String?
  stock       Int          @default(0) // Jumlah porsi tersedia
  isAvailable Boolean      @default(true)
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  transactionItems TransactionItem[]
  stockHistories   StockHistory[]

  @@map("menus")
}

// Stock history untuk tracking perubahan stok
model StockHistory {
  id          String   @id @default(cuid())
  menuId      String
  quantity    Int      // Positive for restock, negative for sales
  type        String   // 'RESTOCK', 'SALE', 'ADJUSTMENT'
  description String?
  createdAt   DateTime @default(now())

  // Relations
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("stock_histories")
}

// Transactions (pesanan)
model Transaction {
  id            String            @id @default(cuid())
  customerId    String
  employeeId    String?           // Karyawan yang melayani
  totalAmount   Decimal           @db.Decimal(10, 2)
  paidAmount    Decimal           @default(0) @db.Decimal(10, 2)
  status        TransactionStatus @default(PENDING)
  paymentMethod PaymentMethod     @default(CASH)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  customer         User              @relation(fields: [customerId], references: [id])
  transactionItems TransactionItem[]
  customerDebt     CustomerDebt?
  paymentRecords   PaymentRecord[]

  @@map("transactions")
}

// Transaction items (detail pesanan)
model TransactionItem {
  id            String  @id @default(cuid())
  transactionId String
  menuId        String
  quantity      Int
  price         Decimal @db.Decimal(10, 2) // Harga saat transaksi
  subtotal      Decimal @db.Decimal(10, 2)

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  menu        Menu        @relation(fields: [menuId], references: [id])

  @@map("transaction_items")
}

// Customer debts (utang pelanggan)
model CustomerDebt {
  id            String   @id @default(cuid())
  customerId    String
  transactionId String   @unique
  totalDebt     Decimal  @db.Decimal(10, 2)
  remainingDebt Decimal  @db.Decimal(10, 2)
  dueDate       DateTime?
  isSettled     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer       User            @relation(fields: [customerId], references: [id])
  transaction    Transaction     @relation(fields: [transactionId], references: [id])
  paymentRecords PaymentRecord[]

  @@map("customer_debts")
}

// Payment records (catatan pembayaran cicilan)
model PaymentRecord {
  id             String   @id @default(cuid())
  customerDebtId String
  transactionId  String
  userId         String   // Siapa yang menerima pembayaran
  amount         Decimal  @db.Decimal(10, 2)
  paymentMethod  PaymentMethod @default(CASH)
  notes          String?
  createdAt      DateTime @default(now())

  // Relations
  customerDebt CustomerDebt @relation(fields: [customerDebtId], references: [id])
  transaction  Transaction  @relation(fields: [transactionId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("payment_records")
}

// Daily sales summary untuk laporan
model DailySummary {
  id               String   @id @default(cuid())
  date             DateTime @unique @db.Date
  totalSales       Decimal  @default(0) @db.Decimal(10, 2)
  totalTransactions Int     @default(0)
  totalCashSales   Decimal  @default(0) @db.Decimal(10, 2)
  totalDebtSales   Decimal  @default(0) @db.Decimal(10, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("daily_summaries")
}
